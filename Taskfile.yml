version: '3'
env:
  JAR_VERSION: '{{.JAR_VERSION | default "0.1"}}'
  IMAGE_VERSION: '{{.CONTAINER_VERSION | default "0.3"}}'
  IMAGE_NAME: '{{.IMAGE_NAME | default "openapi-builder"}}'
  MOUNT_PATH: '{{.MOUNT_PATH | default "/openapi"}}'
  RELEASE_NOTES: '{{.RELEASE_NOTES | default "Initial release"}}'
  LICENSE_INFO: '{{.LICENSE_INFO | default "Apache License v2.0"}}'
  PORT: '{{.PORT | default "8080"}}'
  HOST: '{{.HOST | default "localhost"}}'

tasks:
  todo:
    vars:
      JSON: '{ "description": "Todo string", "title": "Todo string" }'
    cmds:
      - "curl -X POST 'http://{{.HOST}}:{{.PORT}}/todo' -H 'Content-Type: application/json' -d '{{.JSON}}'"

  list:
    cmds:
      - "curl -X GET 'http://{{.HOST}}:{{.PORT}}/todo' -H 'accept: */*' | jq ."

  refresh-api:
    deps: [build]
    internal: true
    cmds:
      - "curl -X GET 'http://{{.HOST}}:{{.PORT}}/api.json' -H 'accept: */*' -o  asciidoc/src/site/asciidoc/spec/openapi.json"
    sources:
      - todo-service/target/todo-service-{{.JAR_VERSION}}-jar-with-dependencies.jar
    generates:
      - asciidoc/src/site/asciidoc/spec/openapi.json

  api:
    deps: [refresh-api]
    cmds:
      - cat asciidoc/src/site/asciidoc/spec/openapi.json | jq .

  test:
    cmds:
      - hurl --test todo.hurl

  build:
    cmds:
      - mvn package
    sources:
      - todo-service/src/main/kotlin/**/*.kt
    generates:
      - todo-service/target/todo-service-{{.JAR_VERSION}}-jar-with-dependencies.jar

  run:
    deps: [build]
    cmds:
      - java -jar todo-service/target/todo-service-{{.JAR_VERSION}}-jar-with-dependencies.jar

  clean:
    cmds:
      - mvn clean
      - rm -rf asciidoc/src/site/asciidoc/index.adoc
      - rm -rf asciidoc/src/site/asciidoc/.openapi-generator
      - rm -rf asciidoc/src/site/asciidoc/.openapi-generator-ignore

  openapi:
    cmds:
      - |
        podman run --rm -v .:{{.MOUNT_PATH}} \
          -it docker.io/unexist/{{.IMAGE_NAME}}:{{.IMAGE_VERSION}} \
          sh -c "cd {{.MOUNT_PATH}} && ln -s asciidoc/src/site/asciidoc/spec spec \
            && openapi-generator-cli generate -g asciidoc \
            --skip-validate-spec \
            --release-note='{{.RELEASE_NOTES}}' \
            --input-spec=asciidoc/src/site/asciidoc/spec/openapi.json \
            --output=asciidoc/src/site/asciidoc \
            --additional-properties=specDir=spec/,useIntroduction=true,licenseInfo='{{.LICENSE_INFO}}' \
          && unlink spec"
    sources:
      - asciidoc/src/site/asciidoc/spec/openapi.json
    generates:
      - asciidoc/src/site/asciidoc/index.adoc

  asciidoc:
    deps: [refresh-api, openapi]
    cmds:
      - mvn -f asciidoc/pom.xml -P generate-docs generate-resources
    sources:
      - asciidoc/src/site/asciidoc/index.adoc
    generates:
      - asciidoc/target/static/documentation/index.html

  open:
    deps: [asciidoc]
    cmds:
      - open asciidoc/target/static/documentation/index.html

  image-build:
    cmds:
      - podman build -t {{.IMAGE_NAME}} -f infrastructure/Containerfile

  image-push:
    cmds:
      - podman login docker.io
      - podman push {{.IMAGE_NAME}}:latest docker.io/unexist/{{.IMAGE_NAME}}:{{.IMAGE_VERSION}}

  publish:
    cmds:
      - |
        podman run --rm --dns 8.8.8.8 -v .:{{.MOUNT_PATH}} \
            -it docker.io/unexist/{{.IMAGE_NAME}}:{{.IMAGE_VERSION}} \
            -e CONFLUENCE_URL \
            -e CONFLUENCE_SPACE_KEY \
            -e CONFLUENCE_ANCESTOR_ID \
            -e CONFLUENCE_USER \
            -e CONFLUENCE_TOKEN \
            sh -c "mvn -f {{.MOUNT_PATH}}/pom.xml -P generate-docs-and-publish generate-resources"
